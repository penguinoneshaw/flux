image:
  # -- The repository to pull the image from.
  repository: ghcr.io/paperless-ngx/paperless-ngx
  # -- The docker tag, if left empty chart's appVersion will be used.
  # @default -- `.Chart.AppVersion`
  tag: ""
  # -- The pull policy for the controller.
  pullPolicy: IfNotPresent

nameOverride: ""
fullnameOverride: ""

controller:
  # -- Create a workload for this chart.
  enabled: true
  # -- Type of the workload object.
  kind: Deployment
  # -- The number of replicas.
  replicas: 1
  # -- Additional annotations for the controller object.
  annotations: {}
  # -- Additional labels for the controller object.
  labels: {}

service:
  # -- Create a service for exposing this chart.
  enabled: true
  # -- The service type used.
  type: ClusterIP
  # -- Additional annotations for the service object.
  annotations: {}
  # -- Additional labels for the service object.
  labels: {}

ingressRoute:
  # -- Create an IngressRoute object for exposing this chart.
  create: false

certificate:
  # -- Create an Certificate object for the exposed chart.
  create: false

env:
  # -- Timezone for the container.
  - name: TZ
    value: Europe/London
  - name: PAPERLESS_TZ
    value: Europe/London
  - name: PAPERLESS_REDIS
    value: redis://redis-headless:6379
  - name: PAPERLESS_CSRF_TRUSTED_ORIGINS
    value: https://paperless.x86.thephysicsflat.xyz
  - name: PAPERLESS_CORS_ALLOWED_HOSTS
    value: https://paperless.x86.thephysicsflat.xyz
  - name: PAPERLESS_TIKA_ENABLED
    value: "true"
  - name: PAPERLESS_TIKA_GOTENBERG_ENDPOINT
    value: http://gotenberg:3000
  - name: PAPERLESS_TIKA_ENDPOINT
    value: http://tika:9998
  - name: PAPERLESS_CONSUMER_POLLING
    value: "60"
  - name: PAPERLESS_CONSUMER_ENABLE_BARCODES
    value: "true"
  - name: PAPERLESS_CONSUMER_ENABLE_ASN_BARCODE
    value: "true"
  - name: PAPERLESS_TASK_WORKERS
    value: "4"
ports:
  http:
    # -- Enable the port inside the `Deployment` and `Service` objects.
    enabled: true
    # -- The port used as internal port and cluster-wide port if `.service.type` == `ClusterIP`.
    port: 8000
    # -- The external port used if `.service.type` == `NodePort`.
    nodePort: null
    # -- The protocol used for the service.
    protocol: TCP

secret:
  # -- Create a new secret containing the [secret values](https://docs.paperless-ngx.com/configuration/#hosting-and-security).
  create: true
  # -- Use an existing secret to store the [secret values](https://docs.paperless-ngx.com/configuration/#hosting-and-security). Please note: keys inside the existing secret must match the keys from below!
  existingSecret: ""
  # -- Secret values used when not using an existing secret. Helm templates are supported for values.
  values:
    # -- Secret key for session tokens.
    PAPERLESS_SECRET_KEY: "{{ randAlphaNum 42 | b64enc }}"
    # -- Optional. Initial admin username.
    # PAPERLESS_ADMIN_USER: ''
    # -- Optional. Initial admin password.
    # PAPERLESS_ADMIN_PASSWORD: ''
    # -- Optional. Initial admin email.
    # PAPERLESS_ADMIN_MAIL: ''
  # -- Additional annotations for the secret object.
  annotations: {}
  # -- Additional labels for the secret object.
  labels: {}

persistentVolumeClaim:
  # -- Create a new persistent volume claim object.
  create: true
  # -- Mount path of the persistent volume claim object.
  mountPath: /usr/src/paperless
  # -- Access mode of the persistent volume claim object.
  accessMode: ReadWriteOnce
  # -- Volume mode of the persistent volume claim object.
  volumeMode: Filesystem
  # -- Storage request size for the persistent volume claim object.
  size: 10Gi
  # -- Storage class name for the persistent volume claim object.
  storageClassName: nfs-client
  # -- Use an existing persistent volume claim object.
  existingPersistentVolumeClaim: ""
  # -- Additional annotations for the persistent volume claim object.
  annotations: {}
  # -- Additional labels for the persistent volume claim object.
  labels: {}

consumption:
  # -- Enable the volume mount of a [consumption directory](https://docs.paperless-ngx.com/configuration/#paths-and-folders).
  enabled: true
  # -- Type of the target volume for the consumption directory. Possible values are: `hostPath`, `pvc`, `csi`, `nfs`, `emptyDir`.
  type: nfs
  # -- Mount path of the consumption directory inside the container.
  mountPath: /consumption
  # -- Host path volume for the consumption directory. Only used if type equals `hostPath`.
  hostPath: {}
  # -- PersistentVolumeClaim for the consumption directory. Only used if type equals `pvc`.
  persistentVolumeClaim: {}
  # -- CSI storage volume for the consumption directory. Only used if type equals `csi`.
  csi: {}
  # -- NFS storage volume for the consumption directory. Only used if type equals `nfs`.
  nfs:
    server: nfs.home.thephysicsflat.xyz
    path: /srv/data/import
  # -- Temporary emptyDir volume for the consumption directory. Only used if type equals `emptyDir` or is unknown.
  emptyDir: {}

export:
  # -- Enable the volume mount of an export directory for [backups](https://docs.paperless-ngx.com/administration/#backup) using the [document exporter](https://docs.paperless-ngx.com/administration/#exporter).
  enabled: true
  # -- Type of the target volume for the export directory. Possible values are: `hostPath`, `pvc`, `csi`, `nfs`, `emptyDir`.
  type: nfs
  # -- Mount path of the export directory inside the container.
  mountPath: /export
  # -- Host path volume for the consumption directory. Only used if type equals `hostPath`.
  hostPath: {}
  # -- PersistentVolumeClaim for the consumption directory. Only used if type equals `pvc`.
  persistentVolumeClaim: {}
  # -- CSI storage volume for the consumption directory. Only used if type equals `csi`.
  csi: {}
  # -- NFS storage volume for the consumption directory. Only used if type equals `nfs`.
  nfs:
    server: nfs.home.thephysicsflat.xyz
    path: /srv/data/export
  # -- Temporary emptyDir volume for the consumption directory. Only used if type equals `emptyDir` or is unknown.
  emptyDir: {}
  cronJob:
    # -- Create a `CronJob` object for [automated exports](https://docs.paperless-ngx.com/administration/#backup).
    enabled: true
    # -- Schedule for automated exports.
    schedule: "0 4 * * 1"
    # -- Enable/disable the cron job schedule quickly.
    suspend: false
    # -- The number of successful finished jobs to retain.
    successfulJobsHistoryLimit: 3
    # -- The number of failed finished jobs to retain.
    failedJobsHistoryLimit: 1
    # -- Additional annotations for the cronjob object.
    annotations: {}
    # -- Additional labels for the cronjob object.
    labels: {}

trash:
  # -- Enable the volume mount of a [trash directory](https://docs.paperless-ngx.com/configuration/#paths-and-folders).
  enabled: true
  # -- Type of the target volume for the trash directory. Possible values are: `hostPath`, `pvc`, `csi`, `nfs`, `emptyDir`.
  type: nfs
  # -- Mount path of the trash directory inside the container.
  mountPath: /trash
  # -- Host path volume for the consumption directory. Only used if type equals `hostPath`.
  hostPath: {}
  # -- PersistentVolumeClaim for the consumption directory. Only used if type equals `pvc`.
  persistentVolumeClaim: {}
  # -- CSI storage volume for the consumption directory. Only used if type equals `csi`.
  csi: {}
  # -- NFS storage volume for the consumption directory. Only used if type equals `nfs`.
  nfs:
    server: nfs.home.thephysicsflat.xyz
    path: /srv/data/trash
  # -- Temporary emptyDir volume for the consumption directory. Only used if type equals `emptyDir` or is unknown.
  emptyDir: {}

serviceAccount:
  # -- Specify the service account used for the controller.
  name: ""

rbac:
  # -- Create `Role` and `RoleBinding` objects.
  create: true
  # -- Additional annotations for the role and role binding objects.
  annotations: {}
  # -- Additional labels for the role and role binding objects.
  labels: {}

# -- Pod-level security attributes. More info [here](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#security-context).
securityContext:
  capabilities:
    add:
      - CHOWN
      - CHMOD
      - SETFCAP
  # fsGroup: 1000
  runAsNonRoot: true
  runAsGroup: 1000
  runAsUser: 1000

# -- Compute resources used by the container. More info [here](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/).
resources:
  {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# -- Pod-level affinity. More info [here](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#scheduling).
affinity:
  {}
  # nodeAffinity:
  #   requiredDuringSchedulingIgnoredDuringExecution:
  #     nodeSelectorTerms:
  #       - matchExpressions:
  #           - key: kubernetes.io/hostname
  #             operator: In
  #             values:
  #               - my-node-xyz
